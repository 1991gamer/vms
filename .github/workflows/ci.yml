name: Deploy

on:
  push:
  # manual triggering from the Actions tab
  workflow_dispatch:
    inputs:
      DOCKERFILE_PATH:
        type: string
        description: 'Path to the Dockerfile'
        required: true
        default: 'tools/docker/exec/Dockerfile'
      DEPLOY_TO_GITHUB_PAGES:
        type: boolean
        description: 'Deploy to Github pages'
        required: true
        default: true
      GITHUB_RELEASE:
        type: boolean
        description: 'Upload GitHub release'
        required: true
        default: false

jobs:
  guard_clause:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ github.token }} # As required by the GitHub-CLI
    permissions:
      actions: 'write' # Required in order to terminate the workflow run.
    steps:
      - uses: actions/checkout@v4
      # Guard clause that cancels the workflow in case of an invalid DOCKERFILE_PATH and/or incorrectly configured Github Pages.
      # The main reason for choosing this workaround for aborting the workflow is the fact that it does not display the workflow as successful, which can set false expectations.
      - name: DOCKERFILE_PATH.
        shell: bash
        run: |
          # We check whether the Dockerfile_path is valid.
          if [ ! -f ${{ github.event.inputs.DOCKERFILE_PATH }} ]; then
              echo "::error title=Invalid Dockerfile path::No file found at ${{ github.event.inputs.DOCKERFILE_PATH }}"
              echo "terminate=true" >> $GITHUB_ENV
          fi

      - name: Github Pages config guard clause
        #if: ${{ github.event.inputs.DEPLOY_TO_GITHUB_PAGES == 'true' }}
        run: |
          # We use the Github Rest api to get information regarding pages for the Github Repository and store it into a temporary file named "pages_response".
          set +e
          gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository_owner }}/$(basename ${{ github.repository }})/pages > pages_response
          # We make sure Github Pages has been enabled for this repository.
          if [ "$?" -ne 0 ]; then
            echo "::error title=Potential pages configuration error.::Please make sure you have enabled Github pages for the ${{ github.repository }} repository. If already enabled then Github pages might be down"
            echo "terminate=true" >> $GITHUB_ENV
          fi
          set -e
          # We make sure the Github pages build & deployment source is set to "workflow" (Github Actions). Instead of a "legacy" (branch).
          if [[ "$(jq --compact-output --raw-output .build_type pages_response)" != "workflow" ]]; then
              echo "Undefined behaviour, Make sure the Github Pages source is correctly configured in the Github Pages settings."
              echo "::error title=Pages configuration error.::Please make sure you have correctly picked \"Github Actions\" as the build and deployment source for the Github Pages."
              echo "terminate=true" >> $GITHUB_ENV
          fi
          rm pages_response

      - name: Terminate run if error occurred.
        run: |
          if [[ $terminate == "true" ]]; then
            gh run cancel ${{ github.run_id }}
            gh run watch ${{ github.run_id }}
          fi


  build:
    needs: guard_clause # Dependency
    runs-on: ubuntu-latest # Image to run the worker on.
    env:
      TAG: "ext2-webvm-base-image" # Tag of docker image.
      IMAGE_SIZE: '${{ github.event.inputs.IMAGE_SIZE }}'
      DEPLOY_DIR: /_site/ # Path to directory where we host the final image from.
    permissions: # Permissions to grant the GITHUB_TOKEN.
      contents: write  # Required permission to make a github release.
    steps:
      # Checks-out our repository under $GITHUB_WORKSPACE, so our job can access it
      - uses: actions/checkout@v4
      #- run: sudo mkdir -p $DEPLOY_DIR
      # Build the i386 Dockerfile image.
      - run: ./build.sh
      - run: sudo mv ./_site $DEPLOY_DIR
      # We generate index.list files for our httpfs to function properly.
      - name: make index.list
        shell: bash
        run: |
          find $DEPLOY_DIR -type d | while read -r dir;
          do
            index_list="$dir/index.list";
            sudo rm -f "$index_list";
            sudo ls "$dir" | sudo tee "$index_list" > /dev/null;
            sudo chmod +rw "$index_list";     
            sudo echo "created $index_list"; 
          done
      # Create a gh-pages artifact in order to deploy to gh-pages.
      - name: Upload GitHub Pages artifact
        uses: actions/upload-pages-artifact@v2
        with:
          # Path of the directory containing the static assets for our gh pages deployment.
          path: ${{ env.DEPLOY_DIR }} # optional, default is _site/


  deploy: # Job that deploys the github-pages artifact to github-pages.
    #if: ${{ github.event.inputs.DEPLOY_TO_GITHUB_PAGES == 'true' }}
    needs: build
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
    permissions:
      pages: write      # to deploy to Pages
      id-token: write   # to verify the deployment originates from an appropriate source
    runs-on: ubuntu-latest
    steps:
      # Deployment to github pages
      - name: Deploy GitHub Pages site
        id: deployment
        uses: actions/deploy-pages@v3

      # After deployment, cut a new release tag
      - name: Get artifacts
        uses: actions/download-artifact@v3

      - name: Display structure of downloaded files
        run: ls -R

      - name: Release to GitHub
        uses: ncipollo/release-action@v1
        with:
          tag: latest
          commit: master
          body: ${{ github.event.head_commit.message }}
          #artifacts: "build/libv86*.js,build/libv86*.js.map,build/v86*.wasm"
          prerelease: true
